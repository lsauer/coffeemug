<!DOCTYPE html>
<!-- saved from url=(0057)https://github.com/lsauer/coffeemug/blob/master/README.md -->
<html style="" class=" js flexbox flexboxlegacy canvas canvastext webgl no-touch geolocation postmessage websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths csspositionsticky"><head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# githubog: http://ogp.me/ns/fb/githubog#"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>coffeemug/README.md at master · lsauer/coffeemug</title>
    <link rel="search" type="application/opensearchdescription+xml" href="https://github.com/opensearch.xml" title="GitHub">
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <link rel="apple-touch-icon-precomposed" sizes="57x57" href="https://github.com/lsauer/coffeemug/blob/master/apple-touch-icon-114.png">
    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="https://github.com/lsauer/coffeemug/blob/master/apple-touch-icon-114.png">
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="https://github.com/lsauer/coffeemug/blob/master/apple-touch-icon-144.png">
    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://github.com/lsauer/coffeemug/blob/master/apple-touch-icon-144.png">

    
    
    <link rel="icon" type="image/x-icon" href="https://github.com/favicon.png">

    <meta content="authenticity_token" name="csrf-param">
<meta content="9OYm/QUzIItfeppzzH1y5FKWYXph1oYa06+xa1ALFtk=" name="csrf-token">

    <link href="./coffeemug_offline_files/github-6f96eda30ff1556bf501fd7c2915aa0157322687.css" media="screen" rel="stylesheet" type="text/css">
    <link href="./coffeemug_offline_files/github2-c6eeca9bdc855924123b0b9533f2ebe538f56027.css" media="screen" rel="stylesheet" type="text/css">
    

  <body class="logged_in page-blob windows vis-public env-production " style="-webkit-print-color-adjust:exact;">
    <div id="wrapper">

    
    

      

      

      

            <div class="site hfeed" itemscope="" itemtype="http://schema.org/WebPage">
      <div class="container hentry">
        
        <!-- /.repohead -->

        <div id="js-repo-pjax-container" data-pjax-container="">
          


<!-- blob contrib key: blob_contributors:v21:3f570e564e2abeb2a8e862babf70f13f -->
<!-- blob contrib frag key: views10/v8/blob_contributors:v21:3f570e564e2abeb2a8e862babf70f13f -->

<!-- block_view_fragment_key: views10/v8/blob:v21:5b07921d2f4fae1a13ddee248721c449 -->

  <div id="slider">

    

      
  


    <div class="frames">
      <div class="frame frame-center" data-path="README.md/" data-permalink-url="/lsauer/coffeemug/blob/035ec608cc62a91615c22bc5a08ce12440a4a4e6/README.md" data-title="coffeemug/README.md at master · lsauer/coffeemug · GitHub" data-type="blob">

        <div id="files" class="bubble">
          <div class="file">
            
            
  <div id="readme" class="blob instapaper_body">
    <article class="markdown-body entry-content" itemprop="mainContentOfPage"><p><a target="_blank" href="./coffeemug_offline_files/coffee-icon128-by-aha-soft-license-free-NC.png"><img src="./coffeemug_offline_files/coffee-icon128-by-aha-soft-license-free-NC.png" style="max-width:100%;"></a></p>

<h1>
<a name="coffeemug---a-concise-hands-on-coffeescript-tutorial" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#coffeemug---a-concise-hands-on-coffeescript-tutorial"><span class="mini-icon mini-icon-link"></span></a>CoffeeMug - A concise, hands-on CoffeeScript Tutorial</h1>

<h5>
<a name="now-delivered-with-a-cup-of-hot-coffee" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#now-delivered-with-a-cup-of-hot-coffee"><span class="mini-icon mini-icon-link"></span></a><em>Now delivered with a cup of hot Coffee</em>
</h5>

<hr><p><strong>author:</strong> Lorenz Lo Sauer 2011 ( <a href="http://www.lsauer.com/">http://www.lsauer.com</a> , @sauerlo), <code>CC-BY-SA 3</code> <a target="_blank" href="./coffeemug_offline_files/cc_by_sa.png"><img src="./coffeemug_offline_files/cc_by_sa.png" style="max-width:100%;"></a></p>

<p><strong>description:</strong> a concise tutorial for JavaScript, R or Python programmers</p>

<p><strong>about:</strong> CoffeeScript (CS), released in 2010 by J. Ashkenas (@jashkenas), is dynamically typed, interpreted programming language. It is takes syntax inspirations from popular dynamic languages such as Haskell, JavaScript, Erlang, Perl, Python, Ruby and even YAML.</p>

<p><strong>release:</strong> <a href="https://github.com/lsauer/coffeemug">https://github.com/lsauer/coffeemug</a></p>

<p><strong>note:</strong> </p>

<ul>
<li>the tutorial is an excerpt from a free book: <a href="http://www.lsauer.com/2012/05/scalable-web-application-development.html">http://www.lsauer.com/2012/05/scalable-web-application-development.html</a> - which is to be released soon.</li>
<li>a brief overview of CoffeeScript's Pros and Cons is provided at the end</li>
<li>if <code>toSource()</code> is missing on a specific JS-engine, simply declare <code>Object::toSource or= -&gt; JSON.stringify this</code>
</li>
<li>live editor and more information at: <a href="http://coffeescript.org/">http://coffeescript.org/</a>
</li>
<li>share your mug of coffee!</li>
</ul><p><strong>todo:</strong> inline code experiments</p>

<hr><p><em>Following, the main aspects of CoffeeScript are demonstrated through short examples and accompanying notes.</em></p>

<h2>
<a name="10-basics" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#10-basics"><span class="mini-icon mini-icon-link"></span></a>1.0 Basics</h2>

<h3>
<a name="11-comments-via-hashessimilar-to-python-and-ruby" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#11-comments-via-hashessimilar-to-python-and-ruby"><span class="mini-icon mini-icon-link"></span></a>1.1 Comments: via Hashes(<code>#</code>),similar to Python and Ruby</h3>

<div class="highlight"><pre>    <span class="c1">#This line is commented out</span>
    <span class="cm">###</span>
<span class="cm">    Block comment similar to the popular syntax: `/*...*/`</span>
<span class="cm">    ###</span>
    <span class="nx">a</span> <span class="o">=</span><span class="mi">3</span><span class="p">;</span> <span class="o">`</span><span class="sr">/*b=2*/</span><span class="o">`</span><span class="p">;</span> <span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="c1">#`b=2` is commented out</span>
</pre></div>

<h3>
<a name="12-variable-assignment---one-per-line" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#12-variable-assignment---one-per-line"><span class="mini-icon mini-icon-link"></span></a>1.2 Variable assignment - one per line!</h3>

<h4>
<a name="set-multiple-statements-per-line-via-line-termination-" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#set-multiple-statements-per-line-via-line-termination-"><span class="mini-icon mini-icon-link"></span></a>set multiple statements per line via line-termination <code>;</code>
</h4>

<div class="highlight"><pre>    <span class="nv">Integer = </span><span class="mi">42</span><span class="p">;</span> <span class="nv">str = </span><span class="s">'test'</span>
    <span class="nx">a</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span> <span class="nx">b</span><span class="o">=</span><span class="mi">5</span>
    <span class="nv">boolval = </span><span class="kc">true</span>
    <span class="nv">objKey : </span><span class="s">'objValue'</span>
    <span class="nv">c = obj : </span><span class="p">(</span><span class="nx">k1</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">k2</span><span class="o">:</span><span class="s">'omg'</span><span class="p">)</span>
    <span class="nv">a = </span><span class="mi">1</span><span class="p">,</span> <span class="nv">b = </span><span class="mi">2</span> <span class="c1">#Error: unexpected ',' ...</span>
</pre></div>

<h3>
<a name="13-nesting-cs-is-indentation-sensitive" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#13-nesting-cs-is-indentation-sensitive"><span class="mini-icon mini-icon-link"></span></a>1.3 Nesting: CS is indentation sensitive!</h3>

<h4>
<a name="nested-objects" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#nested-objects"><span class="mini-icon mini-icon-link"></span></a>Nested Objects</h4>

<div class="highlight"><pre>    <span class="nv">Point =</span>
      <span class="nv">coord :</span>
         <span class="nv">x : </span><span class="mi">100</span>
         <span class="nv">y : </span><span class="mi">200</span>
</pre></div>

<h4>
<a name="example-without-proper-identation-obj-is-packed-into-c" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#example-without-proper-identation-obj-is-packed-into-c"><span class="mini-icon mini-icon-link"></span></a>Example: without proper identation, 'obj' is packed into 'c'</h4>

<div class="highlight"><pre>    <span class="nv">c =</span>
    <span class="nv">objKey : </span><span class="s">'objValue'</span><span class="p">,</span> <span class="nv">objKey2 : </span><span class="p">.</span><span class="mi">0</span>
    <span class="nv">obj : </span><span class="p">(</span><span class="nx">k1</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">k2</span><span class="o">:</span><span class="s">'omg'</span><span class="p">)</span>
    <span class="p">;</span><span class="nv">obj : </span><span class="p">(</span><span class="nx">k1</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">k2</span><span class="o">:</span><span class="s">'omg'</span><span class="p">)</span> <span class="c1">#'expected' behavior</span>
    <span class="nx">alert</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</pre></div>

<h4>
<a name="14-variable-assignment-switching-values-via-destructured-assignment" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#14-variable-assignment-switching-values-via-destructured-assignment"><span class="mini-icon mini-icon-link"></span></a>1.4 Variable assignment: Switching values via 'destructured assignment'</h4>

<div class="highlight"><pre>    <span class="nx">alert</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">]</span>
    <span class="nx">alert</span> <span class="mi">0</span><span class="o">||</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span> <span class="o">or</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#logical-or operator; JS's comma ','-operator</span>
    <span class="nx">alert</span> <span class="nx">a</span>
</pre></div>

<h5>
<a name="compute-and-asssign" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#compute-and-asssign"><span class="mini-icon mini-icon-link"></span></a>compute and asssign</h5>

<div class="highlight"><pre>    <span class="nv">six = </span><span class="p">(</span><span class="nv">one = </span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nv">two = </span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nv">three = </span><span class="mi">3</span><span class="p">)</span> <span class="c1">#results in `6`</span>
    <span class="nx">alert</span> <span class="p">[</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">,</span> <span class="nx">two</span> <span class="o">*</span> <span class="nx">three</span><span class="p">]</span>
</pre></div>

<h4>
<a name="conditions--conditional-assignment" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#conditions--conditional-assignment"><span class="mini-icon mini-icon-link"></span></a>Conditions / conditional assignment:</h4>

<div class="highlight"><pre>    <span class="nv">integer = </span><span class="mi">42</span> <span class="k">if</span> <span class="kc">true</span>

    <span class="k">if</span> <span class="nx">happy</span> <span class="o">and</span> <span class="nx">knowsIt</span>
      <span class="nx">clapsHands</span><span class="p">()</span>
      <span class="nx">chaChaCha</span><span class="p">()</span>
    <span class="k">else</span>
      <span class="nx">showIt</span><span class="p">()</span>

    <span class="nx">options</span> <span class="o">or=</span> <span class="nx">defaults</span> <span class="c1">#in JS: options || (options = defaults);</span>

    <span class="nv">eldest = </span><span class="k">if</span> <span class="mi">24</span> <span class="o">&gt;</span> <span class="mi">21</span> <span class="k">then</span> <span class="s">"Liz"</span> <span class="k">else</span> <span class="s">"Ike"</span>
</pre></div>

<h3>
<a name="15-functions-and-variables-assigned-according-to-lexical-scope" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#15-functions-and-variables-assigned-according-to-lexical-scope"><span class="mini-icon mini-icon-link"></span></a>1.5 Functions and variables: assigned according to lexical scope</h3>

<h4>
<a name="functions-are-executed-in-closures" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#functions-are-executed-in-closures"><span class="mini-icon mini-icon-link"></span></a>functions are executed in closures</h4>

<div class="highlight"><pre>    <span class="nv">square = </span><span class="nf">(x) -&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span>
</pre></div>

<h4>
<a name="passing-closures" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#passing-closures"><span class="mini-icon mini-icon-link"></span></a>passing closures</h4>

<div class="highlight"><pre>    <span class="nv">compute = </span><span class="nf">(fn) -&gt;</span> <span class="nx">alert</span> <span class="nx">fn</span><span class="p">()</span>
    <span class="nv">num = </span><span class="nx">compute</span><span class="p">(</span> <span class="o">-&gt;</span> <span class="nb">window</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="mi">10</span> <span class="p">)</span>
    <span class="nv">num = </span><span class="nx">compute</span><span class="p">(</span> <span class="nf">(x) -&gt;</span> <span class="nx">x</span><span class="o">*</span><span class="nx">x</span> <span class="p">)</span>
</pre></div>

<h4>
<a name="anonymous-functions" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#anonymous-functions"><span class="mini-icon mini-icon-link"></span></a>Anonymous functions:</h4>

<div class="highlight"><pre>    <span class="nx">do</span> <span class="o">-&gt;</span> <span class="nx">x</span><span class="o">=</span><span class="mi">5</span><span class="p">;</span> <span class="nx">x</span><span class="o">*</span><span class="nx">x</span>
</pre></div>

<h4>
<a name="arguments-default-values" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#arguments-default-values"><span class="mini-icon mini-icon-link"></span></a>Arguments: Default values</h4>

<div class="highlight"><pre>    <span class="nv">fill = </span><span class="nf">(container, liquid = "coffee") -&gt;</span> <span class="p">...</span>
</pre></div>

<h4>
<a name="traditional-ie-bracketed-function-invocation-syntax" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#traditional-ie-bracketed-function-invocation-syntax"><span class="mini-icon mini-icon-link"></span></a>'traditional' (i.e. bracketed) function invocation syntax</h4>

<div class="highlight"><pre>    <span class="nx">alert</span><span class="p">(</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span>
</pre></div>

<h4>
<a name="arguments-splat-operator-" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#arguments-splat-operator-"><span class="mini-icon mini-icon-link"></span></a>Arguments: splat-operator <code>...</code>:</h4>

<div class="highlight"><pre>    <span class="nv">race = </span><span class="nf">(winner, runners, others...) -&gt;</span>
      <span class="nx">print</span> <span class="nx">winner</span><span class="p">,</span> <span class="nx">others</span>
</pre></div>

<h5>
<a name="expands-after-javascript-transcompilation-to" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#expands-after-javascript-transcompilation-to"><span class="mini-icon mini-icon-link"></span></a>expands after JavaScript transcompilation, to:</h5>

<div class="highlight"><pre>    <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">runners</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">&lt;=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">?</span> <span class="nx">__slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="p">[];</span>
</pre></div>

<h4>
<a name="closures-bracket-operator--as-a-closure-wrapper" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#closures-bracket-operator--as-a-closure-wrapper"><span class="mini-icon mini-icon-link"></span></a>Closures: bracket-operator <code>(...)</code> as a closure wrapper</h4>

<div class="highlight"><pre>    <span class="k">for</span> <span class="nx">filename</span> <span class="k">in</span> <span class="nx">list</span>
      <span class="nx">do</span> <span class="nf">(filename) -&gt;</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span> <span class="nx">filename</span><span class="p">,</span> <span class="nf">(err, contents) -&gt;</span>
          <span class="nx">compile</span> <span class="nx">filename</span><span class="p">,</span> <span class="nx">contents</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</pre></div>

<h3>
<a name="implicit-return-of-the-last-line-within-a-block-statement-ie-r-language-like" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#implicit-return-of-the-last-line-within-a-block-statement-ie-r-language-like"><span class="mini-icon mini-icon-link"></span></a>Implicit <code>return</code> of the last line within a block-statement: i.e. <code>R</code>-language like</h3>

<div class="highlight"><pre>    <span class="nv">grade = </span><span class="nf">(student) -&gt;</span>
      <span class="k">if</span> <span class="nx">student</span><span class="p">.</span><span class="nx">excellentWork</span>
        <span class="s">"A+"</span>
      <span class="k">else</span> <span class="k">if</span> <span class="nx">student</span><span class="p">.</span><span class="nx">okayStuff</span>
        <span class="k">if</span> <span class="nx">student</span><span class="p">.</span><span class="nx">triedHard</span> <span class="k">then</span> <span class="s">"B"</span> <span class="k">else</span> <span class="s">"B-"</span>
      <span class="k">else</span>
        <span class="s">"C"</span>
</pre></div>

<h3>
<a name="16-arrays" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#16-arrays"><span class="mini-icon mini-icon-link"></span></a>1.6 Arrays:</h3>

<div class="highlight"><pre>    <span class="nv">list = </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</pre></div>

<h5>
<a name="smart-multiline-expansion" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#smart-multiline-expansion"><span class="mini-icon mini-icon-link"></span></a>smart multiline expansion</h5>

<div class="highlight"><pre>    <span class="nx">list</span> <span class="o">=</span><span class="p">[</span><span class="mi">1</span>
           <span class="mi">2</span>
           <span class="mi">3</span><span class="p">]</span>
</pre></div>

<h4>
<a name="slices" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#slices"><span class="mini-icon mini-icon-link"></span></a>slices</h4>

<div class="highlight"><pre>    <span class="nv">numbers = </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
    <span class="nx">alert</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">][</span><span class="mi">0</span><span class="p">...</span><span class="mi">3</span><span class="p">]</span> <span class="c1">#1,2,3</span>
</pre></div>

<h4>
<a name="copy" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#copy"><span class="mini-icon mini-icon-link"></span></a>copy</h4>

<div class="highlight"><pre>    <span class="nv">copy    = </span><span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">...</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span>
    <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">...</span><span class="mi">3</span><span class="p">]</span>  <span class="c1">#JS: `arr.slice(0, 3)`</span>
    <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="mi">3</span><span class="p">]</span>   <span class="c1">#JS: `arr.slice(0, 4)`</span>
    <span class="nx">numbers</span><span class="p">[</span><span class="mi">3</span><span class="p">..</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">6</span><span class="p">]</span>
</pre></div>

<h4>
<a name="bitlists-increases-readability-of-webgl-etc--code" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#bitlists-increases-readability-of-webgl-etc--code"><span class="mini-icon mini-icon-link"></span></a>Bitlists (increases readability of WebGL, etc.. -code)</h4>

<div class="highlight"><pre>    <span class="nv">bitlist = </span>
    <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
      <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">]</span>
</pre></div>

<h3>
<a name="17-jss-bitwise-operators------" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#17-jss-bitwise-operators------"><span class="mini-icon mini-icon-link"></span></a>1.7 JS's Bitwise operators: <code>| &amp; ! ~ &lt;&lt; &gt;&gt;</code>
</h3>

<h3>
<a name="18-trinity-operator-pythonian-verbatim-style" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#18-trinity-operator-pythonian-verbatim-style"><span class="mini-icon mini-icon-link"></span></a>1.8 Trinity operator: Pythonian verbatim style</h3>

<div class="highlight"><pre>    <span class="nv">date = </span><span class="k">if</span> <span class="nx">friday</span> <span class="k">then</span> <span class="nx">sue</span> <span class="k">else</span> <span class="nx">jill</span> 
</pre></div>

<h4>
<a name="traditional-trinity-operator-performs-as-expected" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#traditional-trinity-operator-performs-as-expected"><span class="mini-icon mini-icon-link"></span></a>'traditional' trinity operator performs as expected</h4>

<div class="highlight"><pre>    <span class="nv">date = </span><span class="nx">friday</span> <span class="o">?</span> <span class="nv">sue : </span><span class="nx">jill</span> 
</pre></div>

<h4>
<a name="trinity-operator-in-conditional-assignment" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#trinity-operator-in-conditional-assignment"><span class="mini-icon mini-icon-link"></span></a>trinity operator in conditional assignment</h4>

<div class="highlight"><pre>    <span class="k">typeof</span> <span class="nx">friday</span> <span class="o">!==</span> <span class="s">"undefined"</span> <span class="o">&amp;&amp;</span> <span class="nx">friday</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">?</span> <span class="nv">friday : </span><span class="p">{</span><span class="nv">sue: </span><span class="nx">jill</span><span class="p">}</span>
</pre></div>

<h3>
<a name="19-objects" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#19-objects"><span class="mini-icon mini-icon-link"></span></a>1.9 Objects:</h3>

<div class="highlight"><pre>    <span class="nv">math =</span>
      <span class="nv">root: </span>  <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span>
      <span class="nv">square: </span><span class="nx">square</span>
      <span class="nv">cube: </span>  <span class="nf">(x) -&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">square</span> <span class="nx">x</span>
</pre></div>

<h4>
<a name="json-syntax" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#json-syntax"><span class="mini-icon mini-icon-link"></span></a>JSON Syntax</h4>

<div class="highlight"><pre>    <span class="nv">singers = </span><span class="p">{</span><span class="nv">Jagger: </span><span class="s">"Rock"</span><span class="p">,</span> <span class="nv">Elvis: </span><span class="s">"Roll"</span><span class="p">}</span>
</pre></div>

<h5>
<a name="sidenote-resolving-js-reserved-name-conflicts" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#sidenote-resolving-js-reserved-name-conflicts"><span class="mini-icon mini-icon-link"></span></a>Sidenote: Resolving JS-reserved name conflicts</h5>

<div class="highlight"><pre>    <span class="nx">$</span><span class="p">(</span><span class="s">'.account'</span><span class="p">).</span><span class="nx">attr</span> <span class="k">class</span><span class="o">:</span> <span class="s">'active'</span>
</pre></div>

<h3>
<a name="110-existence-operator--ie-not-null-or-undefined" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#110-existence-operator--ie-not-null-or-undefined"><span class="mini-icon mini-icon-link"></span></a>1.10 Existence operator: <code>?</code> (i.e. not null or undefined):</h3>

<div class="highlight"><pre>    <span class="nx">alert</span> <span class="s">"I knew it!"</span> <span class="k">if</span> <span class="nx">elvis</span><span class="o">?</span>
</pre></div>

<h2>
<a name="20-looping-and-conditional-statements" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#20-looping-and-conditional-statements"><span class="mini-icon mini-icon-link"></span></a>2.0 Looping and conditional statements</h2>

<h3>
<a name="21-array-comprehensions" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#21-array-comprehensions"><span class="mini-icon mini-icon-link"></span></a>2.1 Array comprehensions:</h3>

<div class="highlight"><pre>    <span class="nv">cubes = </span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nx">cube</span> <span class="nx">num</span> <span class="k">for</span> <span class="nx">num</span> <span class="k">in</span> <span class="nx">list</span><span class="p">)</span>
    <span class="nx">log</span> <span class="s">'current element:'</span><span class="p">,</span> <span class="nx">food</span> <span class="k">for</span> <span class="nx">food</span> <span class="k">in</span> <span class="p">[</span><span class="s">'toast'</span><span class="p">,</span> <span class="s">'cheese'</span><span class="p">,</span> <span class="s">'wine'</span><span class="p">]</span>
</pre></div>

<h4>
<a name="loop-conditions" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#loop-conditions"><span class="mini-icon mini-icon-link"></span></a>Loop conditions</h4>

<div class="highlight"><pre>    <span class="nx">alert</span> <span class="nx">food</span> <span class="k">for</span> <span class="nx">food</span> <span class="k">in</span> <span class="nx">foods</span> <span class="k">when</span> <span class="nx">food</span> <span class="o">isnt</span> <span class="s">'chocolate'</span>
</pre></div>

<h4>
<a name="loop-nesting" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#loop-nesting"><span class="mini-icon mini-icon-link"></span></a>Loop nesting</h4>

<div class="highlight"><pre>    <span class="nx">plotPoint</span> <span class="nx">i</span> <span class="k">for</span> <span class="nx">food</span> <span class="k">in</span> <span class="nx">Points</span><span class="p">.</span><span class="nx">x</span> <span class="k">for</span> <span class="nx">j</span> <span class="k">in</span> <span class="nx">Points</span><span class="p">.</span><span class="nx">y</span> <span class="k">for</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">Points</span><span class="p">.</span><span class="nx">z</span>
</pre></div>

<h4>
<a name="example-the-first-ten-properties-of-the-global-object-window" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#example-the-first-ten-properties-of-the-global-object-window"><span class="mini-icon mini-icon-link"></span></a>Example: The first ten properties of the global object <code>window</code>:</h4>

<div class="highlight"><pre>    <span class="nv">globals = </span><span class="p">(</span><span class="nx">name</span> <span class="k">for</span> <span class="nx">name</span> <span class="k">of</span> <span class="nb">window</span><span class="p">)[</span><span class="mi">0</span><span class="p">...</span><span class="mi">10</span><span class="p">]</span>
</pre></div>

<h4>
<a name="array-ranges-with-keyword-by-to-define-the-range-step-conditions-are-possible" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#array-ranges-with-keyword-by-to-define-the-range-step-conditions-are-possible"><span class="mini-icon mini-icon-link"></span></a>Array-<code>ranges</code> with keyword <code>by</code>, to define the range-step. conditions are possible</h4>

<ul>
<li>in JS, similar results can be obtained through <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>apply</code>
</li>
</ul><div class="highlight"><pre>  <span class="nv">countdown = </span><span class="nx">x</span><span class="o">:</span><span class="p">(</span><span class="nx">num</span> <span class="k">for</span> <span class="nx">num</span> <span class="k">in</span> <span class="p">[</span><span class="mi">10</span><span class="p">..</span><span class="mi">1</span><span class="p">]),</span> <span class="nx">y</span><span class="o">:</span><span class="p">(</span><span class="nx">num</span> <span class="k">for</span> <span class="nx">num</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="mi">10</span><span class="p">]</span> <span class="k">by</span> <span class="mi">2</span><span class="p">)</span>
  <span class="c1">#returns: {'x':[10,9,8,7,6,5,4,3,2,1], 'y': [0,2,4,6,8,10]}</span>
</pre></div>

<h3>
<a name="22-foreach-loop" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#22-foreach-loop"><span class="mini-icon mini-icon-link"></span></a>2.2 foreach loop:</h3>

<div class="highlight"><pre>    <span class="nv">ages = </span><span class="k">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span> <span class="k">of</span> <span class="p">[</span><span class="nv">x: </span><span class="mi">10</span><span class="p">,</span> <span class="nv">y: </span><span class="mi">100</span><span class="p">]</span>
    <span class="s">"key: </span><span class="si">#{</span><span class="nx">key</span><span class="si">}</span><span class="s"> has value: </span><span class="si">#{</span><span class="nx">val</span><span class="si">}</span><span class="s">"</span>
</pre></div>

<h4>
<a name="to-check-for-hasownproperty" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#to-check-for-hasownproperty"><span class="mini-icon mini-icon-link"></span></a>to check for hasOwnProperty...</h4>

<div class="highlight"><pre>    <span class="k">for</span> <span class="nx">own</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">object</span>
</pre></div>

<h3>
<a name="23-while-loop" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#23-while-loop"><span class="mini-icon mini-icon-link"></span></a>2.3 while loop:</h3>

<div class="highlight"><pre>    <span class="k">if</span> <span class="k">this</span><span class="p">.</span><span class="nx">studyingEconomics</span>
      <span class="nx">buy</span><span class="p">()</span>  <span class="k">while</span> <span class="nx">supply</span> <span class="o">&gt;</span> <span class="nx">demand</span>
      <span class="nx">sell</span><span class="p">()</span> <span class="nx">until</span> <span class="nx">supply</span> <span class="o">&gt;</span> <span class="nx">demand</span>

    <span class="nx">i</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span> <span class="nv">lyrics = </span><span class="k">while</span> <span class="nx">i</span><span class="o">--</span>
      <span class="s">"</span><span class="si">#{</span><span class="nx">num</span><span class="si">}</span><span class="s"> little monkeys, jumping on the bed.</span>
<span class="s">        One fell out and bumped his head on the bed.\n"</span>
</pre></div>

<h3>
<a name="24-switch-statement" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#24-switch-statement"><span class="mini-icon mini-icon-link"></span></a>2.4 switch statement</h3>

<div class="highlight"><pre>    <span class="k">switch</span> <span class="nx">day</span>
      <span class="k">when</span> <span class="s">"Mon"</span><span class="p">,</span> <span class="s">"Tue"</span> <span class="k">then</span> <span class="nx">go</span> <span class="nx">work</span>
      <span class="k">else</span> <span class="nx">go</span> <span class="nx">work</span>  <span class="c1">#default</span>
</pre></div>

<h2>
<a name="30-coffescript-operators" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#30-coffescript-operators"><span class="mini-icon mini-icon-link"></span></a>3.0 CoffeScript Operators</h2>

<ul>
<li>CS abolishes the transitive or implicit equality operator: <code>==</code> turns into (<code>→</code>) <code>===</code>
</li>
</ul><h3>
<a name="31-comparison" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#31-comparison"><span class="mini-icon mini-icon-link"></span></a>3.1 Comparison:</h3>

<pre><code># `== → === ; != → !== ; is → === , isnt → !===`
</code></pre>

<h3>
<a name="32-boolean-operators-and-aliases" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#32-boolean-operators-and-aliases"><span class="mini-icon mini-icon-link"></span></a>3.2 Boolean operators and aliases</h3>

<pre><code># not → ! ; and → &amp;&amp; ; or → || ; bitwise: ~ | &amp; &lt;&lt; &gt;&gt; &gt;&gt;&gt;
# on → true ; yes → true ; off→ false; no → false (YAML) ; unless ... → if(!...)
</code></pre>

<h3>
<a name="33-conditional-operators-and--as-this-operator" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#33-conditional-operators-and--as-this-operator"><span class="mini-icon mini-icon-link"></span></a>3.3 Conditional operators and *<code>@</code>* as <code>this-operator</code>
</h3>

<div class="highlight"><pre>    <span class="c1"># `then → while:if/else... switch/case`</span>
    <span class="c1"># `@ → this; this → this`</span>
    <span class="nv">Account = </span><span class="nf">(customer, cart) -&gt;</span>
      <span class="vi">@customer = </span><span class="nx">customer</span>
      <span class="vi">@cart = </span><span class="nx">cart</span>
</pre></div>

<h4>
<a name="expressing-the-example-above-as-javascript-the-code-expands-to" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#expressing-the-example-above-as-javascript-the-code-expands-to"><span class="mini-icon mini-icon-link"></span></a>Expressing the example above as JavaScript, the code expands to:</h4>

<div class="highlight"><pre>    <span class="nv">Account = </span><span class="nx">function</span><span class="p">(</span><span class="nx">customer</span><span class="p">,</span> <span class="nx">cart</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nv">customer = </span><span class="nx">customer</span><span class="p">;</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nv">cart = </span><span class="nx">cart</span><span class="p">;</span>
    <span class="p">};</span>
</pre></div>

<h3>
<a name="33-in-operator" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#33-in-operator"><span class="mini-icon mini-icon-link"></span></a>3.3 <code>in</code> operator</h3>

<div class="highlight"><pre>    <span class="c1"># `of → in` ; `in` → has no JS equivalent, see below</span>
    <span class="nv">winner = </span><span class="kc">yes</span> <span class="k">if</span> <span class="nx">pick</span> <span class="k">in</span> <span class="p">[</span><span class="mi">47</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span>
</pre></div>

<h3>
<a name="34-chained-comparison-x--y--z" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#34-chained-comparison-x--y--z"><span class="mini-icon mini-icon-link"></span></a>3.4 chained comparison <code>x &gt; y &gt; z...</code>
</h3>

<div class="highlight"><pre>    <span class="nv">cholesterol = </span><span class="mi">127</span>
    <span class="nv">healthy = </span><span class="mi">200</span> <span class="o">&gt;</span> <span class="nx">cholesterol</span> <span class="o">&gt;</span> <span class="mi">60</span>
    <span class="nx">alert</span> <span class="mi">10</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&gt;</span><span class="mi">3</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&gt;-</span><span class="mi">4</span><span class="o">&gt;-</span><span class="mi">7</span> <span class="c1">#false</span>
</pre></div>

<h3>
<a name="35-existential-operator--and--overcomes-jss-unassigned-variable-errors" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#35-existential-operator--and--overcomes-jss-unassigned-variable-errors"><span class="mini-icon mini-icon-link"></span></a>3.5 <code>Existential</code> Operator <code>?</code> and <code>?.</code> overcomes JS's unassigned variable Errors</h3>

<div class="highlight"><pre>    <span class="nv">mindexists = </span><span class="kc">true</span> <span class="k">if</span> <span class="nx">mind</span><span class="o">?</span> <span class="o">and</span> <span class="o">not</span> <span class="nx">world</span><span class="o">?</span>
    <span class="nx">ifspeedexistssetto</span> <span class="o">?=</span> <span class="mi">75</span>
    <span class="nv">footprints = </span><span class="nx">yeti</span> <span class="o">?</span> <span class="s">"bear"</span>
</pre></div>

<h4>
<a name="oop-existantial-operator---for-methods-and-attributes-soaks-up-undefined-errors" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#oop-existantial-operator---for-methods-and-attributes-soaks-up-undefined-errors"><span class="mini-icon mini-icon-link"></span></a>OOP: Existantial Operator  <code>?.</code> for methods and attributes; 'soaks up' <em><code>undefined</code></em> Errors</h4>

<div class="highlight"><pre>    <span class="nv">getattributeevenifMIA = </span><span class="nx">starsystem</span><span class="p">.</span><span class="nx">drawPlanet</span><span class="o">?</span><span class="p">().</span><span class="nx">atmosphere</span><span class="o">?</span><span class="p">.</span><span class="nx">constitution</span>
</pre></div>

<h4>
<a name="check-for-bs-existence-and-invoking-b-with-window-as-an-argument" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#check-for-bs-existence-and-invoking-b-with-window-as-an-argument"><span class="mini-icon mini-icon-link"></span></a>check for <code>b</code>'s existence and invoking b with window as an argument</h4>

<div class="highlight"><pre>    <span class="nv">a = </span><span class="nx">b</span><span class="o">?</span> <span class="nb">window</span> <span class="c1">#JS: a = typeof b === "function" ? b(window) : void 0;</span>
</pre></div>

<h4>
<a name="check-for-bs-existence-assigning-b-or-alternativly-window" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#check-for-bs-existence-assigning-b-or-alternativly-window"><span class="mini-icon mini-icon-link"></span></a>check for <code>b</code>'s existence assigning <code>b</code> or alternativly <code>window</code>
</h4>

<div class="highlight"><pre>    <span class="nv">a = </span><span class="nx">b</span> <span class="o">?</span> <span class="nb">window</span>  <span class="c1">#JS:a = typeof b !== "undefined" &amp;&amp; b !== null ? b : window;</span>
</pre></div>

<h3>
<a name="36-operator-overview" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#36-operator-overview"><span class="mini-icon mini-icon-link"></span></a>3.6 Operator overview</h3>

<table>
<tbody><tr>
<th>CoffeeScript</th>
<th>JavaScript</th>
</tr>
<tr>
<td><tt>is</tt></td>
<td><tt>===</tt></td>
</tr>
<tr>
<td><tt>isnt</tt></td>
<td><tt>!==</tt></td>
</tr>
<tr>
<td><tt>not</tt></td>
<td><tt>!</tt></td>
</tr>
<tr>
<td><tt>and</tt></td>
<td><tt>&amp;&amp;</tt></td>
</tr>
<tr>
<td><tt>or</tt></td>
<td><tt>||</tt></td>
</tr>
<tr>
<td><tt>true, yes, on</tt></td>
<td><tt>true</tt></td>
</tr>
<tr>
<td><tt>false, no, off</tt></td>
<td><tt>false</tt></td>
</tr>
<tr>
<td><tt>@, this</tt></td>
<td><tt>this</tt></td>
</tr>
<tr>
<td><tt>of</tt></td>
<td><tt>in</tt></td>
</tr>
<tr>
<td><tt>in</tt></td>
<td><i>no JS equivalent</i></td>
</tr>
</tbody></table><h3>
<a name="37-examples" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#37-examples"><span class="mini-icon mini-icon-link"></span></a>3.7 Examples</h3>

<div class="highlight"><pre>    <span class="nx">stop</span><span class="p">()</span> <span class="k">if</span> <span class="nx">idlemode</span> <span class="o">is</span> <span class="kc">on</span>
    <span class="nx">letTheWildRumpusBegin</span><span class="p">()</span> <span class="nx">unless</span> <span class="nx">answer</span> <span class="o">is</span> <span class="kc">no</span>
    <span class="k">if</span> <span class="nx">car</span><span class="p">.</span><span class="nx">speed</span> <span class="o">&lt;</span> <span class="nx">limit</span> <span class="k">then</span> <span class="nx">accelerate</span><span class="p">()</span>
    <span class="k">if</span> <span class="nx">car</span><span class="p">.</span><span class="nx">speed</span> <span class="o">&lt;</span> <span class="nx">limit</span>
      <span class="nx">accelerate</span><span class="p">()</span>

    <span class="nv">winner = </span><span class="kc">yes</span> <span class="k">if</span> <span class="nx">pick</span> <span class="k">in</span> <span class="p">[</span><span class="mi">47</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span>
    <span class="nx">print</span> <span class="nx">inspect</span> <span class="s">"My name is </span><span class="si">#{</span><span class="nx">@name</span><span class="si">}</span><span class="s">"</span>
</pre></div>

<h2>
<a name="40-object-oriented-programming-in-cs" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#40-object-oriented-programming-in-cs"><span class="mini-icon mini-icon-link"></span></a>4.0 Object oriented programming in CS</h2>

<ul>
<li>CS provides <strong>OOP</strong> through prototypal '<em>wrapping</em>'</li>
<li>CS provides <em>named classes</em>, <em>inheritance</em>
</li>
<li>
<code>super</code> invokes the superclass constructor</li>
</ul><h3>
<a name="41-classes" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#41-classes"><span class="mini-icon mini-icon-link"></span></a>4.1 Classes</h3>

<div class="highlight"><pre>    <span class="k">class</span> <span class="nx">Animal</span>
      <span class="nv">constructor: </span><span class="nf">(@name) -&gt;</span>
      <span class="nv">move: </span><span class="nf">(meters) -&gt;</span>
        <span class="nx">alert</span> <span class="nx">@name</span> <span class="o">+</span> <span class="s">" moved </span><span class="si">#{</span><span class="nx">meters</span><span class="si">}</span><span class="s">m."</span>
</pre></div>

<h3>
<a name="42-inheritance" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#42-inheritance"><span class="mini-icon mini-icon-link"></span></a>4.2 Inheritance</h3>

<div class="highlight"><pre>    <span class="k">class</span> <span class="nx">Snake</span> <span class="k">extends</span> <span class="nx">Animal</span>
      <span class="nv">move: </span><span class="o">-&gt;</span>
        <span class="nx">alert</span> <span class="s">"Slithering..."</span>
        <span class="k">super</span> <span class="mi">5</span>

    <span class="nv">sam = </span><span class="k">new</span> <span class="nx">Snake</span> <span class="s">"Sammy the Python"</span>
    <span class="nx">sam</span><span class="p">.</span><span class="nx">move</span><span class="p">()</span>
</pre></div>

<h3>
<a name="43-method-assignment" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#43-method-assignment"><span class="mini-icon mini-icon-link"></span></a>4.3 Method assignment</h3>

<div class="highlight"><pre>    <span class="nb">String</span><span class="o">::</span><span class="nv">dasherize = </span><span class="o">-&gt;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">replace</span> <span class="sr">/_/g</span><span class="p">,</span> <span class="s">"-"</span>
</pre></div>

<h3>
<a name="44-function-binding-declaration-and-binding-via-the-fat-arrow--operator" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#44-function-binding-declaration-and-binding-via-the-fat-arrow--operator"><span class="mini-icon mini-icon-link"></span></a>4.4 Function Binding: declaration and binding via the fat arrow <em><code>=&gt;</code></em> operator</h3>

<div class="highlight"><pre>    <span class="c1">#event-closure is called in the DOM-context of the clicked element</span>
    <span class="nx">$</span><span class="p">(</span><span class="s">'.shopping_cart'</span><span class="p">).</span><span class="nx">bind</span> <span class="s">'click'</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">@customer</span><span class="p">.</span><span class="nx">purchase</span> <span class="nx">@cart</span>
</pre></div>

<h2>
<a name="50-advanced-cs" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#50-advanced-cs"><span class="mini-icon mini-icon-link"></span></a>5.0 Advanced CS</h2>

<h3>
<a name="51-destructured-assignment-to-any-degree-of-complexity" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#51-destructured-assignment-to-any-degree-of-complexity"><span class="mini-icon mini-icon-link"></span></a>5.1 Destructured Assignment to any degree of complexity</h3>

<div class="highlight"><pre>    <span class="nv">getPoint2D = </span><span class="nf">(hexpos) -&gt;</span>
      <span class="c1"># Do computation... w. obj = {metadata:[h,s,l]}</span>
      <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">obj</span><span class="p">]</span>

    <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="p">{</span><span class="nx">metadata</span><span class="o">:</span><span class="p">[</span><span class="nx">h</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">l</span><span class="p">]}]</span> <span class="o">=</span> <span class="nx">getPoint2D</span> <span class="s">"</span><span class="err">#</span><span class="s">223322"</span>
</pre></div>

<h4>
<a name="destructured-assignment-with-splats" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#destructured-assignment-with-splats"><span class="mini-icon mini-icon-link"></span></a>Destructured Assignment with splats</h4>

<div class="highlight"><pre>    <span class="nv">tag = </span><span class="s">"&lt;omics&gt;"</span>
    <span class="p">[</span><span class="nx">firstletter</span><span class="p">,</span><span class="nx">tagname</span><span class="p">...,</span><span class="nx">lastletter</span><span class="p">]</span> <span class="o">=</span> <span class="nx">tag</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">tagname</span><span class="p">.</span><span class="nx">join</span><span class="p">()</span> <span class="c1">#omics</span>
</pre></div>

<h3>
<a name="52-backtick-operator--pass-through-abitrary-javascript-code" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#52-backtick-operator--pass-through-abitrary-javascript-code"><span class="mini-icon mini-icon-link"></span></a>5.2 Backtick Operator <code>...</code>: Pass through abitrary Javascript code</h3>

<div class="highlight"><pre>    <span class="nv">hi = </span><span class="o">`</span><span class="nx">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">[</span><span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="s">"Hello JavaScript"</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s">": "</span><span class="p">);</span>
    <span class="p">}</span><span class="o">`</span>
</pre></div>

<h3>
<a name="53-strings-and-multiline-strings" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#53-strings-and-multiline-strings"><span class="mini-icon mini-icon-link"></span></a>5.3 Strings and Multiline strings</h3>

<h4>
<a name="double-quoted-strings-can-extend-over-several-lines-already-shown" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#double-quoted-strings-can-extend-over-several-lines-already-shown"><span class="mini-icon mini-icon-link"></span></a>Double-Quoted strings can extend over several lines (already shown)</h4>

<h4>
<a name="interpolation-via--ruby-like" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#interpolation-via--ruby-like"><span class="mini-icon mini-icon-link"></span></a>interpolation via <code>#{...}</code> (<strong>Ruby</strong>-like)</h4>

<div class="highlight"><pre>    <span class="nv">author = </span><span class="s">"Wittgenstein"</span>
    <span class="nv">quote  = </span><span class="s">"A picture is a fact. -- </span><span class="si">#{</span> <span class="nx">author</span> <span class="si">}</span><span class="s">"</span>

    <span class="nv">sentence = </span><span class="s">"</span><span class="si">#{</span> <span class="mi">22</span> <span class="o">/</span> <span class="mi">7</span> <span class="si">}</span><span class="s"> is a decent approximation of p"</span>
</pre></div>

<h5>
<a name="heredoc-syntax" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#heredoc-syntax"><span class="mini-icon mini-icon-link"></span></a><code>Heredoc</code> syntax</h5>

<div class="highlight"><pre>    <span class="nv">html = </span><span class="s">"""</span>
<span class="s">           &lt;strong&gt;</span>
<span class="s">             cup of coffeescript</span>
<span class="s">           &lt;/strong&gt;</span>
<span class="s">           """</span>
    <span class="c1">#in JS: html = "&lt;strong&gt;\n  cup of coffeescript\n&lt;/strong&gt;";</span>
</pre></div>

<h3>
<a name="531-non-interpolated-multiline-comment-block" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#531-non-interpolated-multiline-comment-block"><span class="mini-icon mini-icon-link"></span></a>5.3.1 Non-interpolated Multiline Comment Block</h3>

<div class="highlight"><pre>    <span class="cm">###</span>
<span class="cm">    CoffeeScript Compiler v1.2.0</span>
<span class="cm">    Released under the MIT License</span>
<span class="cm">    ###</span>
</pre></div>

<h3>
<a name="54-heregexes-heredoc-regexes-to-comment-out-complex-regular-expressions" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#54-heregexes-heredoc-regexes-to-comment-out-complex-regular-expressions"><span class="mini-icon mini-icon-link"></span></a>5.4 <code>Heregexes</code>: Heredoc-Regexes to comment-out complex Regular Expressions</h3>

<div class="highlight"><pre>    <span class="nv">OPERATOR = </span><span class="sr">///</span> <span class="sr">^ (  </span><span class="c1">#starting with</span>
        <span class="sr">[^J]   </span><span class="c1">#must not contain J i.e. letter absent from the periodic table</span>
        <span class="sr">[0-9   </span><span class="c1">#cyclic connection quantifier and charge; e.g. [Co+3] or [Co+++]</span>
        <span class="sr">...</span>
<span class="sr">    ) ///</span>

</pre></div>

<h3>
<a name="55-error-handling" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#55-error-handling"><span class="mini-icon mini-icon-link"></span></a>5.5 Error Handling</h3>

<h4>
<a name="cs-does-not-type-conditional-error-handling-yet" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#cs-does-not-type-conditional-error-handling-yet"><span class="mini-icon mini-icon-link"></span></a>CS does not type-conditional Error handling (yet)</h4>

<div class="highlight"><pre>    <span class="k">try</span>
      <span class="nx">func</span><span class="p">()</span>
    <span class="k">catch</span> <span class="nx">error</span>
      <span class="nx">print</span> <span class="nx">error</span>
    <span class="k">finally</span>
      <span class="nx">cleanUp</span><span class="p">()</span>
</pre></div>

<h4>
<a name="error-handling-inside-a-function-call-eg-useful-for-jsonp" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#error-handling-inside-a-function-call-eg-useful-for-jsonp"><span class="mini-icon mini-icon-link"></span></a>error handling inside a function call e.g. useful for JSONP</h4>

<div class="highlight"><pre>    <span class="nx">alert</span><span class="p">(</span>
      <span class="k">try</span>
        <span class="nx">nonexistent</span> <span class="o">/</span> <span class="kc">undefined</span>
      <span class="k">catch</span> <span class="nx">error</span>
        <span class="s">"And the error is ... </span><span class="si">#{</span><span class="nx">error</span><span class="si">}</span><span class="s">"</span>
    <span class="p">)</span>
</pre></div>

<p><br></p>

<hr><h2>
<a name="tutorial-comment" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#tutorial-comment"><span class="mini-icon mini-icon-link"></span></a><strong>Tutorial comment</strong>
</h2>

<p>The tutorial is based on the great official tutorial provided by CoffeScript, and will be continuously improved by me and helpful others on github.</p>

<p>Any contributions and suggestions are always welcome.</p>

<hr><h2>
<a name="pros-and-cons-of-coffeescript" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#pros-and-cons-of-coffeescript"><span class="mini-icon mini-icon-link"></span></a>Pros and Cons of CoffeeScript</h2>

<h3>
<a name="pros" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#pros"><span class="mini-icon mini-icon-link"></span></a><strong>Pros:</strong>
</h3>

<ul>
<li>compact, typically 30% less code</li>
<li>faster to write, with a more keyboard accessible character-set</li>
<li>extends the powerful JavaScript language</li>
<li>Class-based and prototypal inheritance model</li>
<li>overcomes Javascript pitfalls</li>
<li>slight performance increase through greater abstraction and encapsulation</li>
<li>limited additional CS compiler error checking</li>
</ul><h3>
<a name="cons" class="anchor" href="https://github.com/lsauer/coffeemug/blob/master/README.md#cons"><span class="mini-icon mini-icon-link"></span></a><strong>Cons:</strong>
</h3>

<ul>
<li>harder to debug as the faulty Javascript code has to be traced back to CS</li>
<li>additional 'language stack' increases complexity</li>
<li>early adoption means less software infrastructure is available at the moment</li>
<li>might decrease someones proficiency of Javascript over time </li>
</ul></article>
  </div>

          </div>
        </div>
      </div>
    </div>

  </div>



        </div>
      </div>
      <div class="context-overlay"></div>
    </div>

      <div id="footer-push"></div><!-- hack for sticky footer -->
    </div><!-- end of wrapper - hack for sticky footer -->

      
      

    



    



    

    

    
    
    
    
  


</body></html>